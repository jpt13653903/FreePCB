// CPT2 notes and proposals

OBSOLETE: NetListNew.h, PartListNew.h, and TextListNew.h contain evolving notes on which functions
are slated for moving into classes for lower-level objects (like CSeg, CNet, etc.)

OBSOLETE: Functions that contain code that won't yet compile (still need translation into the new
idiom) are marked off with #ifndef CPT2.  The goal is to bring these back to life bit by bit.

I would propose that CFreePcbView::CancelSelection() always turn off net highlighting by default.  If caller really wants to rehighlight
afterwards (I don't think that will be frequent), let 'em do it by hand.

I am trying a new system for thermals, where their drawing objects get associated not with areas but with individual vertices/tees/pins.
As a result the old routines CArea::SetConnections, CNet::SetAreaConnections and the like can be phased out.  CVertex::SetNeedsThermal,
CPin::SetNeedsThermal, CNet::SetThermals, CNetList::SetThermals, and CPartList::SetThermals can take their place.

While translating CFreePcbView::OnPartDelete(), I grappled with the distinction between CNetList::PartDeleted() and 
CNetList::PartDisconnected() --- hard for me to figure out.  The former
seems to leave in place notional pins within nets that refer to parts no longer in existence.  I'm not convinced that 
having these is terribly useful, and I can imagine them causing confusion or puzzling program behavior down the road.
Therefore I'm proposing a different distinction that I think might be more helpful:  when deleting a part, user can choose whether or not to destroy
all the traces that emanate from that part.  If no, then there will be stub traces that terminate in the positions where the vanished pins used to be 
(might be useful if, say, user decides to trade out one kind of header for another, a trade that might leave the board's traces mostly unchanged).
If yes, then the behavior will be similar to what we had before.  But in no case will there be phantom pins on non-existent parts.

Reorganized class CShape a little: m_ref and m_value are now ctexts (formerly they were CTexts);  all the m_ref_xi, m_ref_angle, ... members 
are now down within the m_ref object;  similarly for the m_value_xi, ... members.

I am adjusting classes pad and padstack so that the latter in particular becomes part of the new class hierarchy, and both have associated
drawing-elements.  This will be useful when converting the footprint editor UI;  instead of using CPin's to represent pins, as happens in the main
view, padstacks will represent the pins user sees.
In honor of this change I'm renaming pad to CPad and padstack to CPadstack.  (Helps me ensure that I've converted things that need converting.)

To do later: just as functions in CNetList and CPartList are getting moved into classes for lower-level objects, I think various functions
can be moved out of CDisplayList into CDLElement and its descendants (will require adding a dlist pointer to class CDLElement).

Latest-n-greatest proposal for drawing/undrawing.  I've grown dissatisfied with my previous system for drawing and undrawing, so here's another
pass at it, hopefully this time a winner.  When a low-level routine is going to make changes to an object 
in the CPcbItem hierarchy, it should first call either
object->Undraw(), in the event that the object is being removed forever, or object->MustRedraw(), 
in the event that it or its membership is only being modified.  The latter routine itself calls object->Undraw(), and then adds the
object to the CHeap object->doc->redraw.  After all modifications are finished, the outer-level routine (CFreePcbDoc::OnLButtonUp, say) should then
call doc->Redraw().  That routine runs through all the objects in doc->redraw, and after double-checking their validity, draws 'em.

Notice also that the behavior of Draw() for individual classes is slightly different now too (other than in the case of CConnect::Draw and
CNet::Draw, which as before simply hand off to Draw() for constituent items).  For the other, lower-level classes (including CPolyline and cpart), 
Draw() first checks the bDrawn flag, and if it's already drawn, it _simply returns_.  This works because before objects are modified they will already
have been undrawn by CPcbItem::MustRedraw().  In the event that (say) both a net and one of its constituent segments get added to CFreePcbDoc::redraw, 
a real possibility, we save effort by just bailing out during CFreePcbDoc::Redraw's second attempt to draw the segment.

I've now generalized the routines subordinate to the former CArea::PolygonModified;  they now work on any CPolyline.  So without hesitation I'm 
invoking this new CPolyline::PolygonModified() each time user edits a sm-cutout.  I could readily do this for board outlines too, but I admit I'm 
not entirely sure if this is desirable (my inexperience with PCB fabrication shows...).   Is it the case that user might want to have two board outlines 
that share a common edge?  If so, then we don't want any sort of fancy merging of CBoard polylines...

Observe that the f-key menus for copper areas, sm-cutouts, and board-outlines have now become more consistent.  Also
note that the nomenclature from the user's perspective has changed a little now that one can do everything with sm-cutout polylines that one can do
with copper areas.  Instead of "adding a cutout" to an area or sm-cutout (the latter particularly confusing), the bottom pane of f-keys now says
"F7 exclude region."  If one selects a corner/side of a hole, the command for removing the hole is no longer "F7 delete cutout" but 
"F7 remove contour."

Previously when CShapes were created they were very frequently constructed with m_doc NULL.  This has been causing various headaches when switching
into the footprint editor, so I'm trying now to get these m_doc members setup to match the doc fields of all the pcb-items on the board.  In a somewhat
related change, I'm changing CFootprintView::m_fp to a pointer, which makes it easier to set up its m_doc member properly with a constructor.
We'll see how well all this pans out down the line...

NB drawing and undrawing are simpler in the footprint editor than in the main editor.  Just 
undraw the whole footprint, make whatever changes, then redraw the whole footprint.  As of r335, CFootprintView::PushUndo does an undraw as 
a convenience, and CFootprintView::FootprintModified does a draw.

I've attempted to improve the behavior of right-clicking.  Now a right-click will select an appropriate object right away, without having to do a 
left-click first.  See CCommonView::RightClickSelect().

Terminological proposal:  I'm developing the opinion that the UI should use "connect"/"connection" to mean
a linear succession of vertices/segs, and "trace" to mean the opposite of "ratline" (i.e., a routed seg).  I've taken the liberty of
altering UI elements accordingly, and am now offering the 'C' key as an alternate to 'T'. 

Group delete possibility:  should we invoke RemoveBreak() for each segment in the group, rather than unrouting them as is currently done?  At 
the moment, I'm permitting ratlines to be members of the selected group, and in that case particularly the proposed behavior seems more
natural.  AS OF R336 THIS CHANGE WAS MADE.

Group copy:  have lifted the restrictions that used to exist on copying from connects attached to pins not in the group. 

Group copy/paste:  I propose that if any side of an area/smcutout is selected, then the whole area will be pasted (more consistent with the way
that selecting a polyline side, elsewhere in the program, permits operations on the whole polyline).
Once the paste is complete, we now invoke PolygonModified() for each selected polyline.  Similar deal within routine CFreePcbView::MoveGroup().  
Made a slight rewording within the paste-group dialog box --- I think the new checkbox 
"Ignore group nets that include no routed traces or areas" is a little clearer and more accurate than the old radio buttons 
"Nets assigned to pins: Retain All --- Retain if pin connected to a trace in the group".

r322 introduces a brand-new system for undo/redo, described at the top of Undo.h.  Should be robust once I have the garbage collector in place,
but that will require some testing.

Note that in r322 CFreePcbDoc::ProjectModified(true) has been assigned some more duties appropriate to the finishing up of a user operation: 
namely, it invokes both CFreePcbDoc::Redraw(), and FinishUndoRecord() (a crucial piece of the new undo architecture).  It also calls Invalidate(false) as
well as CCommonView::SetMainMenu().

Irritating discovery during r325:  all the trouble we've been having with CFileDialog is an artifact of compiling in Debug mode.  If you do
a Release-version compile, all the flaky behavior disappears.  Thanks a lot, MS...  Did a lot of research before I figured that out, and
made headway on understanding MS's preferred new API for selecting files.  Made some code sketches in case we want ever to move in that
direction.

Regarding phantom pins, as of r329 I no longer bail out with an error if they're found in a document being loaded.  Instead, the program just
ignores them.

As of r335 class CShape and the whole footprint machinery has been overhauled.  CShape is now a descendant of CPcbItem, meaning that memory
management for it and its constituents like CPadstack and CCentroid will adhere to the same system as everything else.  I decided I would make 
this change prior to implementing the garbage collector, which I promise is soon.  The cache is no longer a 
CMapStringToPtr type, but just a CShapeList, consisting basically of a CHeap<CShape> and
going under the name CFreePcbDoc::m_slist;  although this is somewhat less efficient when it comes to finding footprints by name, I don't
imagine that will cause much of an overall performance hit (if it does, class CShapeList can be souped up.)  A sizeable benefit to this 
is that the undo machinery could be adapted to handle changes in the footprint cache.  Therefore, if you swap out some shapes, when returning
from the fp editor or the DlgPartlist (say), these changes can now be undone.

In related moves, the code when exiting DlgAddPart and DlgPartlist has been rearranged.  Formerly DlgAddPart::DoDataExchange on exit had the
responsibility to load in fp's from libraries and reconcile name conflicts.  These jobs are now handled in CPartList::ImportPartlistInfo().

As of r340, have mocked up some code to implement my idea for netlist file synching.  The idea is to allow user to create a quasi-permanent link 
between an .fpc file and an associated netlist file.  This can be done either from within Project>Options or during a File>Import-netlist.  The
effects of having such a link:  (1) whenever a part is inserted/reinserted into the board, or whenever a part is assigned a new footprint, the
program will check the (resident) netlist file for references to the part.  It will then assign pins from the part to the appropriate nets wherever 
possible.    (2) Analogously, if a net is (re)introduced onto the board, the program will assign whatever pins it can to that net automatically, 
based on the netlist file specs.  This feature I hope will provide the sort of functionality that was formerly provided by so-called phantom pins and 
parts with null shapes (which I hope to phase out).

Speaking of parts with null shapes, in an effort to discourage them, I now have the program automatically generate a dummy shape (currently
just a little silkscreen circle) for parts whose footprints are not found during a netlist file import.  I find parts with null shapes 
suboptimal for a couple of reasons:  they create great hazards for the programmer, and I think they can be puzzling to the user, who is unlikely
to realize that these parts are actually present, lurking in the partlist but invisible on the board.  I would like ultimately to remove all the
code that is already present and intended to handle these null shapes.

As of r350, have added a new logging feature for debugging, which can be excluded from the build by removing the #define CPT2_LOG at the top of
of FreePcbDoc.h.  Now, every time user opens fubar.fpc, an additional file fubar.fpc.log gets started, containing initially a complete copy of
fubar.fpc.  Each time user performs an operation in the main editor, additional lines get added onto the bottom of fubar.fpc.log that record 
the operation's details, including any data gathered from dlg boxes.  The log file is saved every time lines are appended, making it (one hopes)
crash-proof.  A programmer in possession of a log file can start FreePcb, hit F11, open the log file, then hit (arbitrary) keys to replay the logger's 
moves step by step.  During replay mode regular editing is disabled, but one can still pan and zoom and select objects to see their status info. 

// FreePCB : programming notes
//

Classes:

	CFreePcbApp:
		- defined in file FreePcb.h, implemented in file FreePcb.cpp 
		- this is the Windows application
		- it contains instances of CFreePcbDoc and CFreePcbView (see below)

	CFreePcbDoc:
		- defined in file FreePcbDoc.h, implemented in file FreePcbDoc.cpp 
		- in the Microsoft "Document-View" architecture, this is the Document
		- it contains all of the data structures representing the PCB layout
		
	CFreePcbView:
		- defined in file FreePcbView.h, implemented in file FreePcbView.cpp 
		- in the Microsoft "Document-View" architecture, this is the View
		- it handles the user interface and draws the PCB layout, using data
			from the CFreePcbDoc
			
	id:
		- common name "id"
		- defined in file ids.h, implemented in file ids.cpp 
		- represents a "tag" that identifies items in the PCB design
		- it is used to identify items that have been selected, and to tag 
			graphic elements for picking by mouse-clicking
			
	CPolyLine:
		- common name "polyline" or "polygon"
		- defined in file PolyLine.h and implemented in file PolyLine.cpp
		- represents an open or closed polyline (a closed polyline is a polygon)
		- contains arrays of corner positions and side-styles, where a side-style 
			may be a straight line or a clockwise or counterclockwise arc
		- a closed polyline may contain multiple contours, where the first contour 
			is the external outline and subsequent contours represent "holes"

	pad:
		- common name "pad"
		- defined in file Shape.h, implemented in file Shape.cpp 
		- represents a copper pad in a padstack
		
	padstack:
		- common name "padstack"
		- defined in file Shape.h, implemented in file Shape.cpp 
		- represents a stack of pads for a single pin in a footprint
		- contains pads for the top, bottom and inner copper layers
		
	CShape:
		- common name "footprint"
		- defined in file Shape.h, implemented in file Shape.cpp 
		- represents a footprint
		- footprints are identified by name, such as "DIP20" or "DSUB-25-male-RA"
		- CShape data will generally be loaded from a library or project file 
		- contains an array of padstacks, one for each pin in the footprint
		- contains an array of CPolyLines for the footprint's graphic representation
			on the silkscreen layer

	part_pin:
		- common name "pin" or "part pin"
		- defined in file PartList.h, implemented in file PartList.cpp 
		- this class represents a single pin of a part
		- it contains a pointer to the cnet that the pin is connected to (or NULL)

	cpart:
		- common name "part"
		- defined in file PartList.h, implemented in file PartList.cpp 
		- represents a single part
		- identified by a reference designator such as "U23"
		- may be accessed by id, reference designator, or a pointer to its address
		- contains a pointer to the CShape object of its footprint
		- contains positioning and status information required for drawing
		- contains an array of part_pins (one for each pin)
		- each padstack contains a pointer to the net attached to that pin
			
	CPartList:
		- common name "part list"
		- defined in file PartList.h, implemented in file PartList.cpp 
		- this contains all of the cparts in the design
		- it is implemented as a linked lists of cparts
		- cparts in the part list are drawn by adding their graphic
			elements to the display list, which handles all drawing to the layout
			area of the application window (see below)
		- since many of the operations on parts require access to the netlist,
			it contains a pointer to the CNetList object for the project
			
	cpin:
		- common name "pin" or "net pin"
		- defined in file NetList.h, implemented if file NetList.cpp
		- represents a single pin in a net
		- contains a pointer to the cpart for the pin
		
	cseg:
		- common name "trace segment" (if routed) or "ratline" (if unrouted)
		- defined in file NetList.h, implemented if file NetList.cpp
		- represents a single routed or unrouted segment of a trace
		
	cvertex:
		- common name "vertex" or "via"
		- defined in file NetList.h, implemented if file NetList.cpp
		- represents a single vertex between csegs in a trace
		- if the csegs are on different layers, defines a via between them
		
	cconnect:
		- common name "connection" or "trace"
		- defined in file NetList.h, implemented if file NetList.cpp
		- represents a single trace or ratline connecting two cpins in a net
		- the start and end pin are represented as indexes into the array of cpins
			in the cnet
		- contains an arrays of csegs and an array of cvertexes
		
	CArea:
		- common name "copper area"
		- defined in file NetList.h, implemented if file NetList.cpp
		- represent a single copper area attached to a net
		- contains a CPolyLine which actually defines the area
		- contains an array of indexes into the pin array for the cnet,
			defining all of the pins that connect to it

	cnet:
		- common name "net"
		- defined in file NetList.h, implemented if file NetList.cpp
		- represents a single net
		- identified by a name, which is a unique string such as "GND"
		- contains an array of pins, where each pin has a part ref and a pin number,
			such as "U23.6" for pin 6 of part U23
		- each pin includes a pointer to the part for that pin
		- contains an array of cconnects that define connections between pins
		- contains an array of copper areas

	CNetList:
		- common name "net list"
		- defined in file NetList.h, implemented in NetList.cpp
		- this is a map of all of the nets in a design
		- since many of the operations on nets require access to the part list,
			it contains a pointer to the CPartList object for the project

	CDLElement:
		- common name "graphic element"
		- defined in file CDisplayList.h
		- this is a structure which describes a primitive graphic element such
			as a line, rectangle, circle, etc.
		- all drawing into the layout area of the window consists of these
			elements, which are placed into a display list (see below)
		- each element is assigned to a drawing layer (such as TOP_SILKSCREEN, etc.)

	CDisplayList:
		- common name "display list"
		- defined in file DisplayList.h, implemented in file DisplayList.cpp 
		- this is a linked list of graphic elements which make up the PCB drawing
		- each element is identified by the id of the item that it represents
		- an item may be erased from the screen by removing all of the 
			graphic elements from the display list which have the item's id,
			then redrawing


Some examples of information flow:

	- when starting the application:
		- a CDisplayList is created
		- a CPartList is created
		- a CNetList is created
		- pointers to the CDisplayList and CNetList are passed to the CPartList
		- pointers to the CDisplayList and CPartList are passed to the CNetList
			
	- when opening a project:
		- the project file is read
		- all cparts are added to the CPartList (see below) 
		- all cnets are added to the CNetList (see below)
			
	- when adding a part:
		- a cpart is created
		- if the footprint of the part doesn't already exist in the design, it is
			imported from a library and a CShape created
		- a pointer to the CShape is passed to the cpart
		- the cpart is added to CPartList
		- CPartList draws the part by adding its graphic elements to the display list
		- each graphic element is identified by the id of the part
		- CDisplayList draws the graphic elements on the screen, thereby drawing the
			part
		- graphic elements drawn to the SELECTION layer are usually invisible, and
			are used for selecting parts (see below)

	- when the user selects a part by clicking the mouse button:
		- the cursor position is passed to CDisplayList::TestSelect(), which searches 
			for a corresponding graphic element on the SELECTION layer (these 
			elements will generally be invisible)
		- if a graphic element is found at the cursor position, its id is passed back
			to the calling program which can use it to identify the item represented
			by the graphic element
 
 

CPT revisions:
1. m_active_width added to CFreePcbView.  Permits adjustment
    of width during routing.  There are coordinated changes in the system of via widths.  
2. Got rid of the OPENFILENAME_SIZE_VERSION_400 business in calls to 
	CFileDialog::CFileDialog().  (Produced "Assertion failed" errors, at least under Visual studio 10.)
2a. In CUR_END_VTX_SELECTED mode, changed the
    original assignment of F2 when the vertex is a via (was FK_ADD_SEGMENT, now FK_VIA_SIZE)
3. Shortcut keys: Ctrl F1..., Ctrl 1..., Alt 1...  NB undo is now ctrl-shift-z (ctrl-y would toggle layer #13 or some such)
4. Changed shift-key and ctrl-key state detection.
5. Tools>Preferences.  Starting to move some config elements to the Registry (desirable?)
6. Since MS broke CFileDialog::SetTemplates(), changed the import netlist and export netlist options dialogs.
7. Moved strings into Resource string table.
8. Allowed adaptible widths for items in MyToolBar, the left pane, and the F-key
	help boxes.  (For use by people doing foreign language adaptations with Resource Hacker)
9. Added a project folder selection button to DlgProjectOptions
10.  Altered DlgLayers.  Now allows for control of the colors in the FootprintView (they match the main view colors, 
	except for the layers that are footprint-specific --- those latter get extra rows in the DlgLayers table).  Allowed
	for setting a color scheme to be used by default in future projects (vals stored in the registry).
11. Fixed bugs with the display of new (empty) documents.
12. Added reference-text-visibility control to DlgAddPart.  Fixed bug where ref text visibility came out randomly when
	copying and pasting.
13. "/" key for toggle units.  "?" for toggle units plus change grid units.  Tweaked FreePcbView::OnChangeUnits().
14. New system for modifying grid values (View>Visible Grid Values, etc.).  Completed conversion over from 
	default.cfg to the registry for all program-wide prefs (for new projects e.g.).  Added checkbox to Project>Options
	to make settings default.  Moved some stuff to Tools>Preferences.

...TortoiseSVN commit by Allan, revision 238

14a. Info related to default new-project settings _no longer_ in the registry, but stored in default.cfg.
15. Modified group-selection behavior, so that there is no longer a distinction between a group of 1 element and a single selected
	item.  To prevent any lost functionality, implemented arrow keys for board edges, area edges, sm-cutouts, and end-vertices; implemented
	ctrl-c/x for single selected items.
15a.  FORGOT TO LIST THIS ONE PREVIOUSLY.  Fixed bug where SetCapture() was not called in CFreePcbView::OnLButtonDown(), causing
	poor behavior when dragging and releasing outside the client area.  Moreover, now allows autoscrolling when dragging a group-select 
	rectangle out to the margins.
16. Added sorting to export netlist.
17. Removed restriction on pin names (before, 1A and A1A were illegal)
18. During connect-to-pin-to-create-ratline mode (CUR_DRAG_NEW_RAT), the status bar now shows the name of the pin where mouse is hovering.
19. After creating such a ratline, it is selected by default.
20. When moving groups/parts, don't unroute an adjacent seg if, say, the group is moving vertically and the seg is vertical (changes in e.g.
   	CNetList::UnrouteSegment() and CNetList::UnrouteSegmentWithoutMerge())
21. When routing a ratline provide highlighting for the opposite end of the ratline
22. Tweaked behavior of ctrl-up/dn (they now change whichever grid is currently relevant --- routing grid if net object is selected, placement
     grid otherwise).  Alt-up/dn now controls the visible grid.
23. Made a start towards ratline elimination in case the ratline's two endpoints are already connected by some sort of copper route
     (including connects and/or areas).  Can't yet create traces where neither end is a pin (see TestC.fpc for an example where this would be
	 nice).
24. Suppressed DRC width errors for segments in the ratline layer.
25. Fixed bug with random ref text visibility after importing netlists.

...TortoiseSVN commit, version 244

25a. Fix 25 (random ref text visibility after importing netlist bug) didn't quite do it;  bug should now be smashed!
26. Fixed bug where SetFKText wasn't reliably called when starting up the footprint editor (see CFootprintView constructor)
27. obparham's idea: boxes for grabbing vertices are no longer a constant size in mils (in pixel terms, they are a minimum of 6 pixels wide/high
	and a maximum of 16 pixels wide/high).
28. Bug fix in ReadFileLines() (FreePcbDoc.cpp) (related to feature #14a).
29. Fixed bug in feature #20 (wasn't implemented when moving parts with the mouse).
30. Created CPartList::CheckBrokenArea():  checks if an area has been broken, or nearly broken, by clearances for traces from other nets.  TODO: 
	make it accommodate areas with curved edges.
31.  THE BIGGIE:  created class CCommonView as a base for CFootprintView and CFreePcbView.  Moved shared functions into it.  Added functionality to
	footprint editor to make it more consistent with the main editor, including:  selection masks; hotkeys for layers and masks;
	arrow keys with dx/dy status display;  status bar when pin & outline-corner selected has become more informative (shows x/y);  
	status bar shows dx/dy when dragging pins, text, ref-text, etc.
32. Reworked the internal handling of the ref-text and value-text objects in footprint editor.  They are now basically instances of CText, 
	meaning we can rely on that class's preexisting functions and eliminate some more-or-less-duplicate code.
33. Modified behavior of CFootprintView::OnViewEntireFootprint() to account better for ref and value text.

...TortoiseSVN commit, version 246

34. Resolved apparent bug in CNetList::ClipAreaPolygon() (a commented-out "if"-clause, now restored).  Was causing insertion of corner into area
	edges to fail if new vertex was collinear with pre-existing vertices.
35. Continuation of #30: CPartList::CheckBrokenArea() now accounts for curved area edges.

...TortoiseSVN commit, version 247

36. Added left-handed mode support (reverses function keys).   Activate it via Tools>Preferences.
37. Fixed CText constructor (dl_sel member wasn't prveviously initialized).  Caused problems when one called CShape::m_value->Undraw()
	in cases where CShape::m_value->Draw() hadn't previously been called (because CShape::m_value_size was 0, say)
38. A little clean-up for CShape::CreateMetaFile() & CreateWarningMetaFile() (evidently pretty old code).
39. (Basically a continuation of #33 earlier.)  Improvements to the new CText::GetBounds().  Before it would fail for text that had 
	never been drawn, implying in turn bogus results from
	FootprintView::OnViewEntireFootprint() when first starting the fp editor.  Also: improved system for initializing the new 
	CShape::m_ref and CShape::m_value.  (Constructor does more of the work, as it should.)
40. In FootprintView, forbade setting ref-text height to 0 --- doing that caused "REF" to shrink down to a useless dot that a later user 
    couldn't select or repair   If users want invisible ref-text, I say they can do it when inserting the part into the board.
	Considered making the same prohibition for value-text, but instead I'm implementing "View>Reveal Value Text" (CFootprintView::OnValueReveal())
	in case user wants to restore a	size-0 "VALUE" (formerly impossible to do short of hacking the fpl file).  
	This supplants the old apparently disused CFootprintView::OnAddValueText() function.
41. Slight change to selection masks in footprint editor.
42. Got ESC key working better in footprint editor.

...TortoiseSVN commit, version 248

43.  Fixed 'N' key so that it selects a net if a ratline was previously selected.  Also turned 'N' into a toggle key, so that pressing it twice takes 
	us back to the prior selection.
44.  Similar changes for 'T' (which selects individual traces)
45. New system for selecting.  (See CDisplayList::TestSelect(), and the new CCommonView::m_sel_offset.)  If user repeatedly clicks on a spot where 
	multiple objects are located, the selection cycles through all of them.  Ctrl-click in the main CFreePcbView is also affected:  if you ctrl-click 
	a spot in order to select or unselect a group member, and don't get the effect you want, keep holding ctrl and clicking until you do.
46. Improved TestLineHit() in utility.cpp so that we get more reliable results (on short segments particularly).  

...TortoiseSVN commit, version 249


